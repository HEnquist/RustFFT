import sys
from matplotlib import pyplot as plt
from read_bench_series import read_benches
from scipy.optimize import minimize
import numpy as np
from normalize_data import normalize

fnames = sys.argv[1:]
data = read_benches(fnames)
data = normalize(data)

radix4_length = [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216]
radix4_fit_length = radix4_length[0:12]
radix4_cost = []
for fftlen in radix4_length:
    benchname = f"bench_radix4_{fftlen}"
    cost = data[benchname]
    radix4_cost.append(cost)

def rms_rel_diff(array1, array2, scaling):
   return np.mean(((array1 - array2)/scaling)**2)

np_len = np.array(radix4_length[0:len(radix4_fit_length)])
np_cost = np.array(radix4_cost[0:len(radix4_fit_length)])
#f = lambda x: rms_rel_diff( np_cost, x[0] + x[1]*np_len**x[2])
f = lambda x: rms_rel_diff( np_cost, x[0] + x[1]*np_len + x[2]*np_len*np.log(np_len), np_len)
#x0 = [0, 1, 1]
x0 = [0, 0, 1]
res = minimize(f, x0)

#print(f"Radix 4, const: {res.x[0]}, slope: {res.x[1]}, exponent {res.x[2]}")
#cost_fit = res.x[0] + res.x[1]*np_len**res.x[2]
cost_fit = res.x[0] + res.x[1]*np.array(radix4_length) + res.x[2]*np.array(radix4_length)*np.log(np.array(radix4_length))

print("--- Paste in scalar_planner_estimates.rs ---")
print("// --- Begin code generated by tools/estimates/fit_radix4.py --- \n")
print(f"const RADIX4_CONST: f32 = {res.x[0]:.5f};")
print(f"const RADIX4_SLOPE: f32 = {res.x[1]:.5f};")
print(f"const RADIX4_LOGSLOPE: f32 = {res.x[2]:.5f};")
print("")
print(f"pub fn estimate_radix4_cost(len: usize, repeats: usize) -> f32 {{")
print(f"    let f_len = len as f32;")
print(f"    (RADIX4_CONST + RADIX4_SLOPE * f_len + RADIX4_LOGSLOPE * f_len * f_len.ln()) * repeats as f32")
print("}")
print("")
print("// --- End code generated by tools/estimates/fit_radix4.py --- \n")

plt.figure(100)
plt.loglog(radix4_length, radix4_cost, '*')
plt.loglog(radix4_length, cost_fit)
plt.title("Radix 4")
plt.xlabel("Length")
plt.ylabel("Cost")

plt.figure(101)
plt.semilogx(radix4_length, cost_fit/np.array(radix4_cost))
plt.title("Radix 4, fit/measured")
plt.xlabel("Length")
plt.ylabel("Cost")
plt.show()

