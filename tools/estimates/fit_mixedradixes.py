import sys
from matplotlib import pyplot as plt
import numpy as np
from read_bench_series import read_benches
from scipy.optimize import minimize
from normalize_data import normalize

fnames = sys.argv[1:]
data = read_benches(fnames)
data = normalize(data)


def rms_rel_diff(array1, array2, scaling):
   return np.mean(((array1 - array2)/scaling)**2)

mixedradixes_lengths = [(3, 4), (3, 5), (3, 7), (3,13), (3,31), (7, 31), (23, 31), (29,31), (31, 127), (31, 233), (127, 233), (127, 1031), (1031, 2003)]
mixedradixes_large_lengths = mixedradixes_lengths
mixedradixes_small_lengths = mixedradixes_lengths[0:8]
mixedradixes_cost = {}
mixedradixes_len = {}
mixedradixes_cost_twiddling = {}
mix_algos = ["mixedradix", "mixedradixsmall", "goodthomas", "goodthomassmall"]
mixedradixes_inner_cost = {}
inner_len = []
inner_cost = []
for mix_lens in mixedradixes_lengths:
    len_a, len_b = mix_lens
    step_len = len_a * len_b
    inner_len.append(step_len)
    benchname1 = f"bench_mixinners_{len_a}_{len_b}"
    cost1 = data[benchname1]
    benchname2 = f"bench_mixinners_{len_b}_{len_a}"
    cost2 = data[benchname2]
    mixedradixes_inner_cost[step_len] = cost1 + cost2
    inner_cost.append(cost1 + cost2)


slope_d = {}
const_d = {}
legends = []

for mr in mix_algos:
    mixedradixes_cost[mr] = []
    mixedradixes_len[mr] = []
    mixedradixes_cost_twiddling[mr] = []
    if mr.endswith("small"):
        lens = mixedradixes_small_lengths
    else:
        lens = mixedradixes_large_lengths
    for fftlens in lens:
        len_a, len_b = fftlens
        benchname = f"bench_{mr}_{len_a}_{len_b}"
        cost = data[benchname]
        if cost > mixedradixes_inner_cost[len_a*len_b]:
            mixedradixes_cost[mr].append(cost)
            mixedradixes_len[mr].append(len_a*len_b)
            mixedradixes_cost_twiddling[mr].append(cost - mixedradixes_inner_cost[len_a*len_b])

    plt.figure(200)
    plt.title("Total time")
    plt.loglog(mixedradixes_len[mr], mixedradixes_cost[mr])
    plt.figure(201)
    mr_overhead = np.array(mixedradixes_cost_twiddling[mr])
    plt.title("Overhead")
    plt.xlabel("Length")
    plt.ylabel("Cost")
    plt.loglog(mixedradixes_len[mr], mr_overhead,'*')

    f = lambda x: rms_rel_diff( mr_overhead, x[0] + x[1]*np.array(mixedradixes_len[mr]), np.array(mixedradixes_len[mr]))
    x0 = [0, 1]
    res = minimize(f, x0)
    fit = res.x[0] + res.x[1]*np.array(mixedradixes_len[mr])
    plt.loglog(mixedradixes_len[mr], fit)

    plt.figure(202)
    plt.semilogx(mixedradixes_len[mr], fit/mr_overhead)
    legends.append(mr)
    legends.append(f"fit to {mr}")

    slope_d[mr] = res.x[1]
    const_d[mr] = res.x[0]

print("// --- Begin code generated by tools/estimates/fit_mixedradixes.py --- \n")

for algo in mix_algos:
    print(f"const {algo.upper()}_SLOPE: f32 = {slope_d[algo]:.5f};")
    print(f"const {algo.upper()}_CONST: f32 = {const_d[algo]:.5f};")
    print("")
    print(f"pub fn estimate_{algo}_cost(len: usize, left_fft: &Arc<Recipe>, right_fft: &Arc<Recipe>, repeats: usize) -> f32 {{")
    print(f"    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());")
    print(f"    let twiddle_cost = {algo.upper()}_SLOPE * (len as f32) + {algo.upper()}_CONST;")
    print(f"    (inners_cost + twiddle_cost) * repeats as f32")
    print("}")
    print("")

print("// --- End code generated by tools/estimates/fit_mixedradixes.py --- \n")

plt.figure(200)
plt.loglog(inner_len, inner_cost)
plt.title("Mixed radixes")
plt.xlabel("Length")
plt.ylabel("Cost")

plt.figure(202)

plt.title("Mixed radixes overhead, fit/measured")
plt.xlabel("Length")
plt.ylabel("Cost")
plt.figure(201)
plt.legend(legends)
plt.show()

