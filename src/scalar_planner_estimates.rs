use std::sync::Arc;
use crate::plan::Recipe;

// All the code below is generated by the scripts in the tools folder

// --- Begin code generated by tools/fit_butterflies.py --- 

const BUTTERFLY_SLOPE_2: f32 = 13.00000;
const BUTTERFLY_CONST_2: f32 = 45.00000;

pub fn estimate_butterfly_cost_2(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_2 * repeats as f32 + BUTTERFLY_CONST_2
}

const BUTTERFLY_SLOPE_3: f32 = 28.00000;
const BUTTERFLY_CONST_3: f32 = 83.00000;

pub fn estimate_butterfly_cost_3(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_3 * repeats as f32 + BUTTERFLY_CONST_3
}

const BUTTERFLY_SLOPE_4: f32 = 50.46667;
const BUTTERFLY_CONST_4: f32 = 7.86667;

pub fn estimate_butterfly_cost_4(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_4 * repeats as f32 + BUTTERFLY_CONST_4
}

const BUTTERFLY_SLOPE_5: f32 = 83.00000;
const BUTTERFLY_CONST_5: f32 = 94.00000;

pub fn estimate_butterfly_cost_5(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_5 * repeats as f32 + BUTTERFLY_CONST_5
}

const BUTTERFLY_SLOPE_6: f32 = 75.66667;
const BUTTERFLY_CONST_6: f32 = 53.66667;

pub fn estimate_butterfly_cost_6(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_6 * repeats as f32 + BUTTERFLY_CONST_6
}

const BUTTERFLY_SLOPE_7: f32 = 167.00000;
const BUTTERFLY_CONST_7: f32 = 94.88889;

pub fn estimate_butterfly_cost_7(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_7 * repeats as f32 + BUTTERFLY_CONST_7
}

const BUTTERFLY_SLOPE_8: f32 = 181.33333;
const BUTTERFLY_CONST_8: f32 = 52.44444;

pub fn estimate_butterfly_cost_8(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_8 * repeats as f32 + BUTTERFLY_CONST_8
}

const BUTTERFLY_SLOPE_11: f32 = 398.00000;
const BUTTERFLY_CONST_11: f32 = 94.00000;

pub fn estimate_butterfly_cost_11(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_11 * repeats as f32 + BUTTERFLY_CONST_11
}

const BUTTERFLY_SLOPE_13: f32 = 569.63333;
const BUTTERFLY_CONST_13: f32 = 13.53333;

pub fn estimate_butterfly_cost_13(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_13 * repeats as f32 + BUTTERFLY_CONST_13
}

const BUTTERFLY_SLOPE_16: f32 = 688.00000;
const BUTTERFLY_CONST_16: f32 = 94.00000;

pub fn estimate_butterfly_cost_16(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_16 * repeats as f32 + BUTTERFLY_CONST_16
}

const BUTTERFLY_SLOPE_17: f32 = 1011.80000;
const BUTTERFLY_CONST_17: f32 = 26.75556;

pub fn estimate_butterfly_cost_17(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_17 * repeats as f32 + BUTTERFLY_CONST_17
}

const BUTTERFLY_SLOPE_19: f32 = 1245.00000;
const BUTTERFLY_CONST_19: f32 = 94.00000;

pub fn estimate_butterfly_cost_19(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_19 * repeats as f32 + BUTTERFLY_CONST_19
}

const BUTTERFLY_SLOPE_23: f32 = 1864.80000;
const BUTTERFLY_CONST_23: f32 = 26.75556;

pub fn estimate_butterfly_cost_23(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_23 * repeats as f32 + BUTTERFLY_CONST_23
}

const BUTTERFLY_SLOPE_29: f32 = 3805.73333;
const BUTTERFLY_CONST_29: f32 = 95.15556;

pub fn estimate_butterfly_cost_29(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_29 * repeats as f32 + BUTTERFLY_CONST_29
}

const BUTTERFLY_SLOPE_31: f32 = 4484.46667;
const BUTTERFLY_CONST_31: f32 = 28.31111;

pub fn estimate_butterfly_cost_31(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_31 * repeats as f32 + BUTTERFLY_CONST_31
}

const BUTTERFLY_SLOPE_32: f32 = 1811.86667;
const BUTTERFLY_CONST_32: f32 = 95.68889;

pub fn estimate_butterfly_cost_32(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_32 * repeats as f32 + BUTTERFLY_CONST_32
}

// --- End code generated by tools/fit_butterflies.py --- 


// --- Begin code generated by tools/fit_radix4.py --- 

const RADIX4_SHORT_CONST: f32 = 165.50661;
const RADIX4_SHORT_SLOPE: f32 = 32.50800;
const RADIX4_SHORT_EXP: f32 = 1.09640;
const RADIX4_LONG_CONST: f32 = 0.01222;
const RADIX4_LONG_SLOPE: f32 = 83.05263;
const RADIX4_LONG_EXP: f32 = 1.09640;

pub fn estimate_radix4_cost(len: usize, repeats: usize) -> f32 {
    if len <= 128 {
        (RADIX4_SHORT_CONST
            + RADIX4_SHORT_SLOPE * (len as f32).powf(RADIX4_SHORT_EXP))
            * repeats as f32
    } else {
        (RADIX4_LONG_CONST
            + RADIX4_LONG_SLOPE * (len as f32).powf(RADIX4_LONG_EXP))
            * repeats as f32
    }
}

// --- End code generated by tools/fit_radix4.py --- 


// --- Begin code generated by tools/fit_raders.py --- 

const RADERS_CONST: f32 = -1131.93604;
const RADERS_SLOPE: f32 = 89.15464;

pub fn estimate_raders_cost(inner_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    (RADERS_CONST
        + RADERS_SLOPE * (inner_fft.len() + 1) as f32
        + 2.0 * inner_fft.cost(1))
        * repeats as f32
}

// --- End code generated by tools/fit_raders.py --- 

// --- Begin code generated by tools/fit_bluesteins.py --- 

const BLUESTEINS_CONST: f32 = -314.29251;
const BLUESTEINS_LEN_SLOPE: f32 = 23.86760;
const BLUESTEINS_INNER_LEN_SLOPE: f32 = 29.63072;

pub fn estimate_bluesteins_cost(len: usize, inner_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    (BLUESTEINS_CONST
        + BLUESTEINS_INNER_LEN_SLOPE * inner_fft.len() as f32
        + BLUESTEINS_LEN_SLOPE * len as f32
        + 2.0 * inner_fft.cost(1))
        * repeats as f32
}

// --- End code generated by tools/fit_bluesteins.py --- 

// --- Begin code generated by tools/fit_mixedradixes.py --- 

const MIXEDRADIX_CONST: f32 = -0.00035;
const MIXEDRADIX_SLOPE: f32 = 190.64596;
const MIXEDRADIX_EXP: f32 = 1.15349;

pub fn estimate_mixedradix_cost(len: usize, left_fft: &Arc<Recipe>, right_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = MIXEDRADIX_CONST
        + MIXEDRADIX_SLOPE * (len as f32).powf(MIXEDRADIX_EXP);
        (inners_cost + twiddle_cost) * repeats as f32
}

const MIXEDRADIXSMALL_CONST: f32 = 238.24648;
const MIXEDRADIXSMALL_SLOPE: f32 = 44.58079;
const MIXEDRADIXSMALL_EXP: f32 = 0.98459;

pub fn estimate_mixedradixsmall_cost(len: usize, left_fft: &Arc<Recipe>, right_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = MIXEDRADIXSMALL_CONST
        + MIXEDRADIXSMALL_SLOPE * (len as f32).powf(MIXEDRADIXSMALL_EXP);
        (inners_cost + twiddle_cost) * repeats as f32
}

const GOODTHOMAS_CONST: f32 = -0.00038;
const GOODTHOMAS_SLOPE: f32 = 186.90465;
const GOODTHOMAS_EXP: f32 = 1.15551;

pub fn estimate_goodthomas_cost(len: usize, left_fft: &Arc<Recipe>, right_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = GOODTHOMAS_CONST
        + GOODTHOMAS_SLOPE * (len as f32).powf(GOODTHOMAS_EXP);
        (inners_cost + twiddle_cost) * repeats as f32
}

const GOODTHOMASSMALL_CONST: f32 = 216.00928;
const GOODTHOMASSMALL_SLOPE: f32 = 25.29560;
const GOODTHOMASSMALL_EXP: f32 = 1.05521;

pub fn estimate_goodthomassmall_cost(len: usize, left_fft: &Arc<Recipe>, right_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = GOODTHOMASSMALL_CONST
        + GOODTHOMASSMALL_SLOPE * (len as f32).powf(GOODTHOMASSMALL_EXP);
        (inners_cost + twiddle_cost) * repeats as f32
}

// --- End code generated by tools/fit_mixedradixes.py ---


