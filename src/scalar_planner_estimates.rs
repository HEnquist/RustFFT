use crate::plan::Recipe;
use std::sync::Arc;

// All the code below is generated by the scripts in the tools folder

// --- Begin code generated by tools/fit_butterflies.py --- 

const BUTTERFLY_SLOPE_2: f32 = 0.97823;
const BUTTERFLY_CONST_2: f32 = 2.30284;

pub fn estimate_butterfly_cost_2(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_2 * repeats as f32 + BUTTERFLY_CONST_2
}

const BUTTERFLY_SLOPE_3: f32 = 2.40518;
const BUTTERFLY_CONST_3: f32 = 2.34034;

pub fn estimate_butterfly_cost_3(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_3 * repeats as f32 + BUTTERFLY_CONST_3
}

const BUTTERFLY_SLOPE_4: f32 = 4.49327;
const BUTTERFLY_CONST_4: f32 = 3.50552;

pub fn estimate_butterfly_cost_4(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_4 * repeats as f32 + BUTTERFLY_CONST_4
}

const BUTTERFLY_SLOPE_5: f32 = 7.44373;
const BUTTERFLY_CONST_5: f32 = 6.14987;

pub fn estimate_butterfly_cost_5(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_5 * repeats as f32 + BUTTERFLY_CONST_5
}

const BUTTERFLY_SLOPE_6: f32 = 6.53089;
const BUTTERFLY_CONST_6: f32 = 5.23636;

pub fn estimate_butterfly_cost_6(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_6 * repeats as f32 + BUTTERFLY_CONST_6
}

const BUTTERFLY_SLOPE_7: f32 = 15.41112;
const BUTTERFLY_CONST_7: f32 = 6.80321;

pub fn estimate_butterfly_cost_7(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_7 * repeats as f32 + BUTTERFLY_CONST_7
}

const BUTTERFLY_SLOPE_8: f32 = 17.64352;
const BUTTERFLY_CONST_8: f32 = 5.33476;

pub fn estimate_butterfly_cost_8(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_8 * repeats as f32 + BUTTERFLY_CONST_8
}

const BUTTERFLY_SLOPE_11: f32 = 34.43564;
const BUTTERFLY_CONST_11: f32 = 3.83674;

pub fn estimate_butterfly_cost_11(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_11 * repeats as f32 + BUTTERFLY_CONST_11
}

const BUTTERFLY_SLOPE_13: f32 = 47.42283;
const BUTTERFLY_CONST_13: f32 = 1.93264;

pub fn estimate_butterfly_cost_13(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_13 * repeats as f32 + BUTTERFLY_CONST_13
}

const BUTTERFLY_SLOPE_16: f32 = 72.04892;
const BUTTERFLY_CONST_16: f32 = 10.96985;

pub fn estimate_butterfly_cost_16(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_16 * repeats as f32 + BUTTERFLY_CONST_16
}

const BUTTERFLY_SLOPE_17: f32 = 147.24542;
const BUTTERFLY_CONST_17: f32 = -40.16929;

pub fn estimate_butterfly_cost_17(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_17 * repeats as f32 + BUTTERFLY_CONST_17
}

const BUTTERFLY_SLOPE_19: f32 = 108.81033;
const BUTTERFLY_CONST_19: f32 = -1.11869;

pub fn estimate_butterfly_cost_19(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_19 * repeats as f32 + BUTTERFLY_CONST_19
}

const BUTTERFLY_SLOPE_23: f32 = 277.62075;
const BUTTERFLY_CONST_23: f32 = -11.83924;

pub fn estimate_butterfly_cost_23(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_23 * repeats as f32 + BUTTERFLY_CONST_23
}

const BUTTERFLY_SLOPE_29: f32 = 570.53807;
const BUTTERFLY_CONST_29: f32 = -10.62950;

pub fn estimate_butterfly_cost_29(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_29 * repeats as f32 + BUTTERFLY_CONST_29
}

const BUTTERFLY_SLOPE_31: f32 = 671.34322;
const BUTTERFLY_CONST_31: f32 = -32.82836;

pub fn estimate_butterfly_cost_31(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_31 * repeats as f32 + BUTTERFLY_CONST_31
}

const BUTTERFLY_SLOPE_32: f32 = 244.10312;
const BUTTERFLY_CONST_32: f32 = -0.58200;

pub fn estimate_butterfly_cost_32(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_32 * repeats as f32 + BUTTERFLY_CONST_32
}

// --- End code generated by tools/fit_butterflies.py --- 

// --- Begin code generated by tools/fit_radix4.py --- 

const RADIX4_SHORT_CONST: f32 = 2.97102;
const RADIX4_SHORT_SLOPE: f32 = 4.57259;
const RADIX4_SHORT_EXP: f32 = 1.16811;
const RADIX4_LONG_CONST: f32 = 210.99859;
const RADIX4_LONG_SLOPE: f32 = 3.48978;
const RADIX4_LONG_EXP: f32 = 1.16811;

pub fn estimate_radix4_cost(len: usize, repeats: usize) -> f32 {
    if len <= 128 {
        (RADIX4_SHORT_CONST
            + RADIX4_SHORT_SLOPE * (len as f32).powf(RADIX4_SHORT_EXP))
            * repeats as f32
    } else {
        (RADIX4_LONG_CONST
            + RADIX4_LONG_SLOPE * (len as f32).powf(RADIX4_LONG_EXP))
            * repeats as f32
    }
}

// --- End code generated by tools/fit_radix4.py --- 

// --- Begin code generated by tools/fit_raders.py --- 

const RADERS_CONST: f32 = -1.80105;
const RADERS_SLOPE: f32 = 15.10183;

pub fn estimate_raders_cost(inner_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    (RADERS_CONST
        + RADERS_SLOPE * (inner_fft.len() + 1) as f32
        + 2.0 * inner_fft.cost(1))
        * repeats as f32
}

// --- End code generated by tools/fit_raders.py --- 


// --- Begin code generated by tools/fit_bluesteins.py --- 

const BLUESTEINS_CONST: f32 = 109.64409;
const BLUESTEINS_LEN_SLOPE: f32 = 2.00747;
const BLUESTEINS_INNER_LEN_SLOPE: f32 = 2.28666;

pub fn estimate_bluesteins_cost(len: usize, inner_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    (BLUESTEINS_CONST
        + BLUESTEINS_INNER_LEN_SLOPE * inner_fft.len() as f32
        + BLUESTEINS_LEN_SLOPE * len as f32
        + 2.0 * inner_fft.cost(1))
        * repeats as f32
}

// --- End code generated by tools/fit_bluesteins.py --- 

// --- Begin code generated by tools/fit_mixedradixes.py --- 

const MIXEDRADIX_SLOPE: f32 = 0.63748;
const MIXEDRADIX_EXP: f32 = 1.18301;

pub fn estimate_mixedradix_cost(len: usize, left_fft: &Arc<Recipe>, right_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = MIXEDRADIX_SLOPE * (len as f32).powf(MIXEDRADIX_EXP);
    (inners_cost + twiddle_cost) * repeats as f32
}

const MIXEDRADIXSMALL_SLOPE: f32 = 7.21191;
const MIXEDRADIXSMALL_EXP: f32 = 0.86855;

pub fn estimate_mixedradixsmall_cost(len: usize, left_fft: &Arc<Recipe>, right_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = MIXEDRADIXSMALL_SLOPE * (len as f32).powf(MIXEDRADIXSMALL_EXP);
    (inners_cost + twiddle_cost) * repeats as f32
}

const GOODTHOMAS_SLOPE: f32 = 16.48511;
const GOODTHOMAS_EXP: f32 = 0.98744;

pub fn estimate_goodthomas_cost(len: usize, left_fft: &Arc<Recipe>, right_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = GOODTHOMAS_SLOPE * (len as f32).powf(GOODTHOMAS_EXP);
    (inners_cost + twiddle_cost) * repeats as f32
}

const GOODTHOMASSMALL_SLOPE: f32 = 4.08666;
const GOODTHOMASSMALL_EXP: f32 = 0.93289;

pub fn estimate_goodthomassmall_cost(len: usize, left_fft: &Arc<Recipe>, right_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = GOODTHOMASSMALL_SLOPE * (len as f32).powf(GOODTHOMASSMALL_EXP);
    (inners_cost + twiddle_cost) * repeats as f32
}

// --- End code generated by tools/fit_mixedradixes.py --- 


