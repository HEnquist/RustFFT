use crate::plan::Recipe;
use std::sync::Arc;

// All the code below is generated by the scripts in the tools folder

// --- Begin code generated by tools/estimates/fit_butterflies.py ---

const BUTTERFLY_SLOPE_2: f32 = 0.14571;
const BUTTERFLY_CONST_2: f32 = 0.34302;

pub fn estimate_butterfly_cost_2(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_2 * repeats as f32 + BUTTERFLY_CONST_2
}

const BUTTERFLY_SLOPE_3: f32 = 0.35826;
const BUTTERFLY_CONST_3: f32 = 0.34861;

pub fn estimate_butterfly_cost_3(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_3 * repeats as f32 + BUTTERFLY_CONST_3
}

const BUTTERFLY_SLOPE_4: f32 = 0.66930;
const BUTTERFLY_CONST_4: f32 = 0.52216;

pub fn estimate_butterfly_cost_4(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_4 * repeats as f32 + BUTTERFLY_CONST_4
}

const BUTTERFLY_SLOPE_5: f32 = 1.10878;
const BUTTERFLY_CONST_5: f32 = 0.91606;

pub fn estimate_butterfly_cost_5(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_5 * repeats as f32 + BUTTERFLY_CONST_5
}

const BUTTERFLY_SLOPE_6: f32 = 0.97281;
const BUTTERFLY_CONST_6: f32 = 0.77998;

pub fn estimate_butterfly_cost_6(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_6 * repeats as f32 + BUTTERFLY_CONST_6
}

const BUTTERFLY_SLOPE_7: f32 = 2.29556;
const BUTTERFLY_CONST_7: f32 = 1.01337;

pub fn estimate_butterfly_cost_7(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_7 * repeats as f32 + BUTTERFLY_CONST_7
}

const BUTTERFLY_SLOPE_8: f32 = 2.62809;
const BUTTERFLY_CONST_8: f32 = 0.79464;

pub fn estimate_butterfly_cost_8(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_8 * repeats as f32 + BUTTERFLY_CONST_8
}

const BUTTERFLY_SLOPE_11: f32 = 5.12936;
const BUTTERFLY_CONST_11: f32 = 0.57150;

pub fn estimate_butterfly_cost_11(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_11 * repeats as f32 + BUTTERFLY_CONST_11
}

const BUTTERFLY_SLOPE_13: f32 = 7.06387;
const BUTTERFLY_CONST_13: f32 = 0.28788;

pub fn estimate_butterfly_cost_13(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_13 * repeats as f32 + BUTTERFLY_CONST_13
}

const BUTTERFLY_SLOPE_16: f32 = 10.73206;
const BUTTERFLY_CONST_16: f32 = 1.63401;

pub fn estimate_butterfly_cost_16(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_16 * repeats as f32 + BUTTERFLY_CONST_16
}

const BUTTERFLY_SLOPE_17: f32 = 21.93296;
const BUTTERFLY_CONST_17: f32 = -5.98342;

pub fn estimate_butterfly_cost_17(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_17 * repeats as f32 + BUTTERFLY_CONST_17
}

const BUTTERFLY_SLOPE_19: f32 = 16.20785;
const BUTTERFLY_CONST_19: f32 = -0.16664;

pub fn estimate_butterfly_cost_19(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_19 * repeats as f32 + BUTTERFLY_CONST_19
}

const BUTTERFLY_SLOPE_23: f32 = 41.35303;
const BUTTERFLY_CONST_23: f32 = -1.76352;

pub fn estimate_butterfly_cost_23(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_23 * repeats as f32 + BUTTERFLY_CONST_23
}

const BUTTERFLY_SLOPE_29: f32 = 84.98456;
const BUTTERFLY_CONST_29: f32 = -1.58332;

pub fn estimate_butterfly_cost_29(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_29 * repeats as f32 + BUTTERFLY_CONST_29
}

const BUTTERFLY_SLOPE_31: f32 = 100.00000;
const BUTTERFLY_CONST_31: f32 = -4.88995;

pub fn estimate_butterfly_cost_31(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_31 * repeats as f32 + BUTTERFLY_CONST_31
}

const BUTTERFLY_SLOPE_32: f32 = 36.36041;
const BUTTERFLY_CONST_32: f32 = -0.08669;

pub fn estimate_butterfly_cost_32(repeats: usize) -> f32 {
    BUTTERFLY_SLOPE_32 * repeats as f32 + BUTTERFLY_CONST_32
}

// --- End code generated by tools/estimates/fit_butterflies.py ---

// --- Begin code generated by tools/estimates/fit_radix4.py ---

const RADIX4_CONST: f32 = 0.90900;
const RADIX4_SLOPE: f32 = 0.58761;
const RADIX4_EXP: f32 = 1.15980;

pub fn estimate_radix4_cost(len: usize, repeats: usize) -> f32 {
    (RADIX4_CONST + RADIX4_SLOPE * (len as f32).powf(RADIX4_EXP)) * repeats as f32
}

// --- End code generated by tools/estimates/fit_radix4.py ---

// --- Begin code generated by tools/estimates/fit_raders.py ---

const RADERS_CONST: f32 = -1.22742;
const RADERS_SLOPE: f32 = 2.30372;

pub fn estimate_raders_cost(inner_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    (RADERS_CONST + RADERS_SLOPE * (inner_fft.len() + 1) as f32 + 2.0 * inner_fft.cost(1))
        * repeats as f32
}

// --- End code generated by tools/estimates/fit_raders.py ---

// --- Begin code generated by tools/estimates/fit_bluesteins.py ---

const BLUESTEINS_CONST: f32 = 16.77562;
const BLUESTEINS_LEN_SLOPE: f32 = 0.30714;
const BLUESTEINS_INNER_LEN_SLOPE: f32 = 0.34986;

pub fn estimate_bluesteins_cost(len: usize, inner_fft: &Arc<Recipe>, repeats: usize) -> f32 {
    (BLUESTEINS_CONST
        + BLUESTEINS_INNER_LEN_SLOPE * inner_fft.len() as f32
        + BLUESTEINS_LEN_SLOPE * len as f32
        + 2.0 * inner_fft.cost(1))
        * repeats as f32
}

// --- End code generated by tools/estimates/fit_bluesteins.py ---

// --- Begin code generated by tools/estimates/fit_mixedradixes.py ---

const MIXEDRADIX_SLOPE: f32 = 0.09496;
const MIXEDRADIX_EXP: f32 = 1.18301;

pub fn estimate_mixedradix_cost(
    len: usize,
    left_fft: &Arc<Recipe>,
    right_fft: &Arc<Recipe>,
    repeats: usize,
) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = MIXEDRADIX_SLOPE * (len as f32).powf(MIXEDRADIX_EXP);
    (inners_cost + twiddle_cost) * repeats as f32
}

const MIXEDRADIXSMALL_SLOPE: f32 = 1.07425;
const MIXEDRADIXSMALL_EXP: f32 = 0.86855;

pub fn estimate_mixedradixsmall_cost(
    len: usize,
    left_fft: &Arc<Recipe>,
    right_fft: &Arc<Recipe>,
    repeats: usize,
) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = MIXEDRADIXSMALL_SLOPE * (len as f32).powf(MIXEDRADIXSMALL_EXP);
    (inners_cost + twiddle_cost) * repeats as f32
}

const GOODTHOMAS_SLOPE: f32 = 2.45554;
const GOODTHOMAS_EXP: f32 = 0.98744;

pub fn estimate_goodthomas_cost(
    len: usize,
    left_fft: &Arc<Recipe>,
    right_fft: &Arc<Recipe>,
    repeats: usize,
) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = GOODTHOMAS_SLOPE * (len as f32).powf(GOODTHOMAS_EXP);
    (inners_cost + twiddle_cost) * repeats as f32
}

const GOODTHOMASSMALL_SLOPE: f32 = 0.60873;
const GOODTHOMASSMALL_EXP: f32 = 0.93289;

pub fn estimate_goodthomassmall_cost(
    len: usize,
    left_fft: &Arc<Recipe>,
    right_fft: &Arc<Recipe>,
    repeats: usize,
) -> f32 {
    let inners_cost = left_fft.cost(right_fft.len()) + right_fft.cost(left_fft.len());
    let twiddle_cost = GOODTHOMASSMALL_SLOPE * (len as f32).powf(GOODTHOMASSMALL_EXP);
    (inners_cost + twiddle_cost) * repeats as f32
}

// --- End code generated by tools/estimates/fit_mixedradixes.py ---
